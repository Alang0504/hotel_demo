<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.hotel_demo.mapper.RoomMapper" >
  <resultMap id="BaseResultMap" type="com.example.hotel_demo.model.Room" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="guest_room_number" property="guestRoomNumber" jdbcType="VARCHAR" />
    <result column="location" property="location" jdbcType="VARCHAR" />
    <result column="category" property="category" jdbcType="VARCHAR" />
    <result column="areas" property="areas" jdbcType="REAL" />
    <result column="bed" property="bed" jdbcType="VARCHAR" />
    <result column="breakfast" property="breakfast" jdbcType="VARCHAR" />
    <result column="user_number" property="userNumber" jdbcType="INTEGER" />
    <result column="policy" property="policy" jdbcType="VARCHAR" />
    <result column="network" property="network" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="REAL" />
    <result column="pic" property="pic" jdbcType="VARCHAR" />
    <result column="room_status" property="roomStatus" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, guest_room_number, location, category, areas, bed, breakfast, user_number, policy, 
    network, price, pic, room_status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.hotel_demo.model.RoomExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from room
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from room
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from room
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.hotel_demo.model.RoomExample" >
    delete from room
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.hotel_demo.model.Room" >
    insert into room (id, guest_room_number, location, 
      category, areas, bed, 
      breakfast, user_number, policy, 
      network, price, pic, room_status
      )
    values (#{id,jdbcType=INTEGER}, #{guestRoomNumber,jdbcType=VARCHAR}, #{location,jdbcType=VARCHAR}, 
      #{category,jdbcType=VARCHAR}, #{areas,jdbcType=REAL}, #{bed,jdbcType=VARCHAR}, 
      #{breakfast,jdbcType=VARCHAR}, #{userNumber,jdbcType=INTEGER}, #{policy,jdbcType=VARCHAR}, 
      #{network,jdbcType=VARCHAR}, #{price,jdbcType=REAL}, #{pic,jdbcType=VARCHAR}, #{roomStatus,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.hotel_demo.model.Room" >
    insert into room
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="guestRoomNumber != null" >
        guest_room_number,
      </if>
      <if test="location != null" >
        location,
      </if>
      <if test="category != null" >
        category,
      </if>
      <if test="areas != null" >
        areas,
      </if>
      <if test="bed != null" >
        bed,
      </if>
      <if test="breakfast != null" >
        breakfast,
      </if>
      <if test="userNumber != null" >
        user_number,
      </if>
      <if test="policy != null" >
        policy,
      </if>
      <if test="network != null" >
        network,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="pic != null" >
        pic,
      </if>
      <if test="roomStatus != null" >
        room_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="guestRoomNumber != null" >
        #{guestRoomNumber,jdbcType=VARCHAR},
      </if>
      <if test="location != null" >
        #{location,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="areas != null" >
        #{areas,jdbcType=REAL},
      </if>
      <if test="bed != null" >
        #{bed,jdbcType=VARCHAR},
      </if>
      <if test="breakfast != null" >
        #{breakfast,jdbcType=VARCHAR},
      </if>
      <if test="userNumber != null" >
        #{userNumber,jdbcType=INTEGER},
      </if>
      <if test="policy != null" >
        #{policy,jdbcType=VARCHAR},
      </if>
      <if test="network != null" >
        #{network,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=REAL},
      </if>
      <if test="pic != null" >
        #{pic,jdbcType=VARCHAR},
      </if>
      <if test="roomStatus != null" >
        #{roomStatus,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.hotel_demo.model.RoomExample" resultType="java.lang.Integer" >
    select count(*) from room
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update room
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.guestRoomNumber != null" >
        guest_room_number = #{record.guestRoomNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.location != null" >
        location = #{record.location,jdbcType=VARCHAR},
      </if>
      <if test="record.category != null" >
        category = #{record.category,jdbcType=VARCHAR},
      </if>
      <if test="record.areas != null" >
        areas = #{record.areas,jdbcType=REAL},
      </if>
      <if test="record.bed != null" >
        bed = #{record.bed,jdbcType=VARCHAR},
      </if>
      <if test="record.breakfast != null" >
        breakfast = #{record.breakfast,jdbcType=VARCHAR},
      </if>
      <if test="record.userNumber != null" >
        user_number = #{record.userNumber,jdbcType=INTEGER},
      </if>
      <if test="record.policy != null" >
        policy = #{record.policy,jdbcType=VARCHAR},
      </if>
      <if test="record.network != null" >
        network = #{record.network,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=REAL},
      </if>
      <if test="record.pic != null" >
        pic = #{record.pic,jdbcType=VARCHAR},
      </if>
      <if test="record.roomStatus != null" >
        room_status = #{record.roomStatus,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update room
    set id = #{record.id,jdbcType=INTEGER},
      guest_room_number = #{record.guestRoomNumber,jdbcType=VARCHAR},
      location = #{record.location,jdbcType=VARCHAR},
      category = #{record.category,jdbcType=VARCHAR},
      areas = #{record.areas,jdbcType=REAL},
      bed = #{record.bed,jdbcType=VARCHAR},
      breakfast = #{record.breakfast,jdbcType=VARCHAR},
      user_number = #{record.userNumber,jdbcType=INTEGER},
      policy = #{record.policy,jdbcType=VARCHAR},
      network = #{record.network,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=REAL},
      pic = #{record.pic,jdbcType=VARCHAR},
      room_status = #{record.roomStatus,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.hotel_demo.model.Room" >
    update room
    <set >
      <if test="guestRoomNumber != null" >
        guest_room_number = #{guestRoomNumber,jdbcType=VARCHAR},
      </if>
      <if test="location != null" >
        location = #{location,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="areas != null" >
        areas = #{areas,jdbcType=REAL},
      </if>
      <if test="bed != null" >
        bed = #{bed,jdbcType=VARCHAR},
      </if>
      <if test="breakfast != null" >
        breakfast = #{breakfast,jdbcType=VARCHAR},
      </if>
      <if test="userNumber != null" >
        user_number = #{userNumber,jdbcType=INTEGER},
      </if>
      <if test="policy != null" >
        policy = #{policy,jdbcType=VARCHAR},
      </if>
      <if test="network != null" >
        network = #{network,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=REAL},
      </if>
      <if test="pic != null" >
        pic = #{pic,jdbcType=VARCHAR},
      </if>
      <if test="roomStatus != null" >
        room_status = #{roomStatus,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.hotel_demo.model.Room" >
    update room
    set guest_room_number = #{guestRoomNumber,jdbcType=VARCHAR},
      location = #{location,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      areas = #{areas,jdbcType=REAL},
      bed = #{bed,jdbcType=VARCHAR},
      breakfast = #{breakfast,jdbcType=VARCHAR},
      user_number = #{userNumber,jdbcType=INTEGER},
      policy = #{policy,jdbcType=VARCHAR},
      network = #{network,jdbcType=VARCHAR},
      price = #{price,jdbcType=REAL},
      pic = #{pic,jdbcType=VARCHAR},
      room_status = #{roomStatus,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>